import { Configuration, OpenAIApi } from 'openai';
import { ILLM } from '../interfaces/ILLM';

interface Generation {
  id: string;
  text: string;
  timestamp: Date;
  model: string;
}

interface HistoryItem {
  id: string;
  prompt: string;
  completion: string;
  timestamp: Date;
  model: string;
}

type GptModel = 'gpt-4' | 'gpt-3.5-turbo';

class GptLLM implements ILLM {
  private history: HistoryItem[];
  private generations: Generation[];
  private variables: Map<string, string>;
  private client: OpenAIApi;
  private currentModel: GptModel;

  constructor(apiKey: string, model: GptModel = 'gpt-4') {
    this.history = [];
    this.generations = [];
    this.variables = new Map();
    const configuration = new Configuration({
      apiKey: apiKey,
    });
    this.client = new OpenAIApi(configuration);
    this.currentModel = model;
  }

  async generate(prompt: string): Promise<string> {
    const updatedPrompt = this.updateVariables(prompt);
    const completion = await this.callGptAPI(updatedPrompt);
    
    this.addToHistory(updatedPrompt, completion);
    this.addGeneration(completion);
    
    return completion;
  }

  private async callGptAPI(prompt: string): Promise<string> {
    const response = await this.client.createChatCompletion({
      model: this.currentModel,
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 300,
    });
    return response.data.choices[0].message?.content.trim() || '';
  }

  setModel(model: GptModel): void {
    this.currentModel = model;
  }

  private addToHistory(prompt: string, completion: string): void {
    const historyItem: HistoryItem = {
      id: this.generateId(),
      prompt,
      completion,
      timestamp: new Date(),
      model: this.currentModel
    };
    this.history.push(historyItem);
  }

  private addGeneration(text: string): void {
    const generation: Generation = {
      id: this.generateId(),
      text,
      timestamp: new Date(),
      model: this.currentModel
    };
    this.generations.push(generation);
  }

  setVariable(key: string, value: string): void {
    this.variables.set(key, value);
  }

  getVariable(key: string): string | undefined {
    return this.variables.get(key);
  }

  updateVariables(text: string): string {
    let updatedText = text;
    for (const [key, value] of this.variables.entries()) {
      const regex = new RegExp(`{{${key}}}`, 'g');
      updatedText = updatedText.replace(regex, value);
    }
    return updatedText;
  }

  getHistory(): HistoryItem[] {
    return this.history;
  }

  getGenerations(): Generation[] {
    return this.generations;
  }

  private generateId(): string {
    return Math.random().toString(36).substr(2, 9);
  }
}

export default GptLLM;